
// =========================================
// 過去の$signalcnt日間の平均サイン点灯数を返す
// =========================================
def SignalCount()
        $signal[$sflag] = $buyCnt
        $sflag = ($sflag + 1) % $signalcnt
        i = 0
        sum = 0
        while (i < $signalcnt)
                if ($signal[i] == -1)
                       return 9999
                end
                sum = sum + $signal[i]
                i = i + 1
        end
        return sum / $signalcnt
end

// =========================================
// 過去X日間の高値
// [In] num	X日間
// =========================================
def CheckPastHigh(num)
        i = 1
        high = {-1}High
        while (i < num)
                high = Max({-1 * i}High, high)
                i = i + 1
        end
        return high
end

// =========================================
// 平均売買代金（株価 x 出来高 / 日数）を返す
// [In] num	日数
// =========================================
def TradingValume(num)
        i = 0
        sum = 0
        while (-1 * num < i)
                if ! ({i}Close && {i}Volume)
                       return 0
                end
                sum = {i}Volume * {i}Close + sum
                i = i - 1
        end
        return sum / num
end

//==================================================
// 騰落レシオ
//==================================================
def UpDownRatio()
        // 騰落レシオの計算
        i = 0
        while (i < $udcount)
                p = 0
                notall = 0
                while (p < $ratiodate[i])
                        if ($up[i][p] == -1 || p == $ratiodate[i] - 1)
                                if ($up[i][p] == -1)
                                        // 騰落率の計算に必要な日数分だけ値上がり銘柄数、値下がり銘柄数の
                                        // データがまだ揃っていないとき
                                        notall = 1
                                else
                                        // $ratiodate日目の値上がり銘柄数、値下がり銘柄数が存在しているときは
                                        // 1日分過去にずらす
                                        // (新しい値上がり銘柄数、値下がり銘柄数で上書きされるのを避けるため)
                                        $up[i][p-1]   = $up[i][p] 
                                        $down[i][p-1] = $down[i][p] 
                                end
                                        // 計算する日の値上がり銘柄数、値下がり銘柄数を初期化
                                        $up[i][p]   = 0
                                        $down[i][p] = 0

                                // 東証1部値上がり銘柄数、値下がり銘柄数の計算
                                c = 1301
                                while (c < 9999)
                                        cc = (string)c 
                                        // 東証1部銘柄ではないときは計算せずに次の銘柄へ進む
                                        if {cc}Market != "T1"
                                                c = c + 1
                                                continue
                                        end

                                        if ({cc}Market == "T1" && {cc}Close && {-1}{cc}Close && {cc}Close > {-1}{cc}Close)
                                                // 東証1部銘柄で、当日と前日の終値が存在していて、当日の終値の方が高い
                                                $up[i][p] = $up[i][p] + 1
                                        elsif ({cc}Market == "T1" && {cc}Close && {-1}{cc}Close && {cc}Close < {-1}{cc}Close)
                                                // 東証1部銘柄で、当日と前日の終値が存在していて、当日の終値の方が安い
                                                $down[i][p] = $down[i][p] + 1
                                        end
                                        c = c + 1
                                end

                                // 騰落率の計算に必要な日数分まだデータが揃っていないときは次の日に進む
                                if (notall == 1)
                                        return
                                end

                        else
                                if (p > 0 && p < $ratiodate[i] -1 && $up[i][$ratiodate[i]-1] != -1)
                                        // 2日目から($ratiodate-1)日目について、値上がり銘柄数、値下がり銘柄数の
                                        // データが存在しているときは、1日分過去にずらす
                                        $up[i][p-1]   = $up[i][p]
                                        $down[i][p-1] = $down[i][p]
                                end
                        end
                        p = p + 1
                end
                // $ratiodate日分の値上がり銘柄数のデータに1つでも0があれば、騰落レシオを計算
                // するために十分な数の株式がまだ上場されていないと判断して日付を進める
                j = 0
                while (j < $ratiodate[i])
                        if ($up[i][j] < 1)
                                return
                        end
                        j = j + 1
                end

                j         = 0
                sumup     = 0        // $ratiodate日分の値上がり銘柄数の合計
                sumdown   = 0        // $ratiodate日分の値下がり銘柄数の合計
                $ratio[i] = 0        // 騰落レシオ
                while (j < $ratiodate[i])
                         sumup   = sumup + $up[i][j]
                         sumdown = sumdown + $down[i][j]
                         j = j + 1
                end

                if (sumdown > 0)
                         $ratio[i] = (float)sumup / (float)sumdown * 100
                else
                         return 
                end

                Print("[" + i + "]")
                Print("値上がり銘柄数 = "+ $up[i][$ratiodate[i] - 1])
                Print("値下がり銘柄数 = "+ $down[i][$ratiodate[i] - 1])
                Print("騰落レシオ = "+ $ratio[i])
                i = i + 1
        end
end

//==================================================
// 現在の株価が最高値，最安値の中間値より大きい場合、現在その株価は上昇トレンドにある
//==================================================
def StockPosition(i)

        if ! ($__INITSP__)
                $HL = [$code_num]
                $__INITSP__ = 1
        end
        if ! ($HL[i])
                //Tilibのオブジェクト生成
                stockPositionDay = 75
                $HL[i] = HighLow_new(stockPositionDay)
                return 0
        end

        //指標の計算を1日進める
        HighLow_next($HL[i])
        highest        = HighLow_high($HL[i])
        lowest        = HighLow_low($HL[i])

        if !highest || !lowest
                return 0
        end

        // 過去75日の最大、最小値の中間価を算出
        threshold = lowest + (highest-lowest)/100 * 50

        // 当日の株価位置がしきい値より大きければ1を返す
        return Close > threshold

end

//==================================================
// エンベロープ
//==================================================
def MovingAverageEnvelope(i)

        if ! ($__INITMAVEP__)
                $MVAVG    = [$code_num]
                $__INITMAVEP__ = 1
        end

        if ! ($MVAVG[i])
                //Tilibのオブジェクト生成
                mvavgDay  = 75
                $EVrate   = 1
                $MVAVG    = [$code_num]
                 $MVAVG[i] = MA_new(mvavgDay)
                return 0
        end

        //指標の計算を1日進める
        MA_next($MVAVG[i])
        evlp = MA_envelope($VAVG[i],$EVrate)
        if ! (evlp)
                return 0
        end

        // 当日の終値が、〇〇移動平均のx%エンベロープより大きければ1を返す
        return Close > evlp

end

//==================================================
// x日前の移動平均線と比較
//==================================================
def CompareMAwithXdayAgo(i)

        if ! ($__INITMAVCOMP__)
                $logDate = 75
                Print("$codenum:" + $code_num +" / logDate:" + $logDate )
                $MVAVG = [$code_num]
                $MAlog = [$logDate*$code_num]
                j=0
                while j < $code_num
                        $MAlog[j] = [$logDate]
                        j = j+1
                end
                $__INITMAVCOMP__ = 1
        end

        if ! ($MVAVG[i])
                //Tilibのオブジェクト生成
                mvavgDay = 75
                $MVAVG[i] = MA_new(mvavgDay)
                return 0
        end

        //指標の計算を1日進める
        MA_next($MVAVG[i])
        mvavg = MA_value($MVAVG[i])

        if ! (mvavg || $logDate > Index)
                return 0
        end

        //移動平均データを記録しておく
        j = Index % $logDate
        if ! ($MAlog[i][j])
                $MAlog[i][j] = 99999
        end
        xdayAgoMA = $MAlog[i][j]
        $MAlog[i][j] = mvavg

        // 当日の移動平均線が、x日前より大きければ1を返す
        return mvavg > xdayAgoMA

end
