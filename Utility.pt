//====================
// 初期化
//====================
def Init()
        $budget     = $budgetIni
//------------------------------------------------
        $set        = [$code_num]
        $buy        = [$code_num]
        $hold       = [$code_num]
// ソート処理 ------------------------------------
        $order      = [9999]
        $buyflag    = [$code_num * 2]
        $sellflag   = [$code_num]
        $buyCnt     = 0
        $sortCnt    = 0      // 昇順/降順ソーティング
        $sortList1  = [$code_num]  // 昇順/降順変数値
        $sortList2  = [$code_num]  // 証券コード
        i = 0
        while (i < $code_num)
                $buyflag[i] = [2]
                i = i + 1
        end
// 騰落レシオ計算用 ------------------------------
        $ratio      = [$udcount]  // 騰落レシオ値
        $ratiodate  = [$udcount]  // 騰落レシオ日数
        $up         = [$udcount]  // 値上がり銘柄数
        $down       = [$udcount]  // 値下がり銘柄数
// 過去X日平均サイン -----------------------------
        $signal     = [999]       // 過去X日平均サイン(MAX=99)
        $sflag      = 0           // 平均サインのフラグ
//      　$totalfee   = 0         // 手数料合計
end

//====================
// 初期化（騰落レシオ・過去x日平均サイン）
//====================
def InitDone()
        i = 0
        while (i < $udcount)
                $up[i]   = [$ratiodate[i]]
                $down[i] = [$ratiodate[i]]
                j = 0
                while (j < $ratiodate[i])
                        $up[i][j]   = -1
                        $down[i][j] = -1
                        j = j + 1
                end
                $ratio[i] = 0
                i = i + 1
        end
        i = 0
        while (i < 999)
                $signal[i] = -1
                i = i + 1
        end
end

// =========================================
// 前日比(率)=(終値-前日の終値)÷前日の終値×100
// =========================================
def DayBfrRatio()
         if ! ({at}Close && {at - 1}Close)
                  return
         end
         return ((float){at}Close - (float){at - 1}Close) / (float){at - 1}Close * 100
end

// =========================================
// 始値→終値(率) = (終値-始値)÷始値×100
// =========================================
def OpenToClose()
         if ! (Close && Open)
                  return
         end
         return ((float)Close - (float)Open) / (float)Open * 100
end

// =========================================
// 終値→高値(率) = (高値-終値)÷終値×100
// =========================================
def CloseToHigh()
         if ! (High && Close)
                  return
         end
         return ((float)High - (float)Close) / (float)Close * 100
end

// =========================================
// 値幅制限
// =========================================
def DailyPriceLimit(price)
        if (100 > price)
                return 30
        elsif (200 > price)
                return 50
        elsif (500 > price)
                return 80
        elsif (700 > price)
                return 100
        elsif (1000 > price)
                return 150
        elsif (1500 > price)
                return 300
        elsif (2000 > price)
                return 400
        elsif (3000 > price)
                return 500
        elsif (5000 > price)
                return 700
        elsif (7000 > price)
                return 1000
        elsif (10000 > price)
                return 1500
        elsif (15000 > price)
                return 3000
        elsif (20000 > price)
                return 4000
        elsif (30000 > price)
                return 5000
        elsif (50000 > price)
                return 7000
        elsif (70000 > price)
                return 10000
        elsif (100000 > price)
                return 15000
        elsif (150000 > price)
                return 30000
        elsif (200000 > price)
                return 40000
        elsif (300000 > price)
                return 50000
        elsif (500000 > price)
                return 70000
        elsif (700000 > price)
                return 100000
        elsif (1000000 > price)
                return 150000
        elsif (1500000 > price)
                return 300000
        elsif (2000000 > price)
                return 400000
        elsif (3000000 > price)
                return 500000
        elsif (5000000 > price)
                return 700000
        elsif (7000000 > price)
                return 1000000
        elsif (10000000 > price)
                return 1500000
        elsif (15000000 > price)
                return 3000000
        elsif (2000000 > price)
                return 4000000
        elsif (3000000 > price)
                return 5000000
        elsif (5000000 > price)
                return 7000000
        else
                return 10000000
        end
end

//====================
// 売買手数料計算
//====================
def Fee(money)
         // SBI証券(スタンダードプラン)の手数料計算
         if (money <= 50000)
                  t = 50
         elsif (money <= 100000)
                  t = 90
         elsif (money <= 200000)
                  t = 105
         elsif (money <= 500000)
                  t = 250
         elsif (money <= 1000000)
                  t = 429
         elsif (money <= 1500000)
                  t = 582
         elsif (money <= 30000000)
                  t = 921
         else
                  t = 973
         end

         $budget   = $budget - t
         $totalfee = $totalfee + t
         return
end

//==================================================
// 売買代金
//==================================================
def SalesValue()
         if ! (Volume && Close)
                  return
         end
         return (int)(Volume * Close)
end

//==================================================
// SortInit
//==================================================
def SortInit()
         i = -1
         while i + 1 < $buyCnt
                  i = i + 1
                  if ($reverse)
                           $sortList1[i] = -9999 // 降順
                  else
                           $sortList1[i] = 9999  // 昇順
                  end
                  $sortList2[i] = 0
         end
         $buyCnt  = 0
         $sortCnt = 0
end

//==================================================
// Swap
//==================================================
def Swap(i, a1)
         a2 = 0
         while (a2 < $buyCnt - a1 - 1)
                   $sortList1[$buyCnt - a2 - 1] = $sortList1[$buyCnt - a2 - 2] //値 並び替え
                   $sortList2[$buyCnt - a2 - 1] = $sortList2[$buyCnt - a2 - 2] //証券コード並び替え
                   a2 = a2 + 1
         end
         $sortList1[a1] = $buyflag[i][1] //値を置き換え
         $sortList2[a1] = Code  //証券コードを記録
         $sortCnt = $sortCnt + 1
end

//==================================================
// 昇順/降順($reverse = 1)にソート
//==================================================
def Sort(i)
         a1 = 0
         // Main関数で買いルールを満たした銘柄
         if ($buyflag[i][0])
                  while (a1 < $buyCnt) // 一件ずつ
                           if (a1 == $sortCnt)
                                    $sortList1[a1] = $buyflag[i][1] // 昇順/降順ソーティングに使用する変数値
                                    $sortList2[a1] = Code     //証券コードを記録
                                    $sortCnt = $sortCnt + 1
                                    break
                           elsif ($reverse && $buyflag[i][1] > $sortList1[a1])
                                    Swap(i, a1)
                                    break
                           elsif (! $reverse && $buyflag[i][1] < $sortList1[a1])
                                    Swap(i, a1)
                                    break
                           end
                           a1 = a1 + 1
                  end

//                  // 使用した$buyflag 配列を初期化
//                  $buyflag[i][0] = 0
//                  $buyflag[i][1] = 0
         end
end

//==================================================
// 株数
//==================================================
def Num(buyUnit,price)
         unit = Unit2(price)
         return (buyUnit / (unit * price)) * unit
end

//==================================================
// データの有無を確認
//==================================================
def PricedataExistCheck(data)
         return !data         //存在する場合 0を返す
end

//==================================================
// 購入可能かチェック
//==================================================
def CheckHighLow(t)
         if ! ({1}High > t && t > {1}Low)
                  return 0
         end
         return t
end

//==================================================
// [翌日逆指値(終日)][値幅制限上限(-1Tick)]
//==================================================
def StopOrderPriceLimitTick()
         m = DailyPriceLimit(Close)
         t = Close - Yobine(Close + m, 0)
         return CheckHighLow(t)
end

//==================================================
// [翌日逆指値(終日)][高値(+1Tick)]
//==================================================
def StopOrderHighTick()
         t = High + Yobine(High, 0)
         return CheckHighLow(t)
end

//==================================================
// [翌日逆指値(終日)][終値(-1Tick)]
//==================================================
def StopOrderCloseTick()
         t = Close - Yobine(Close, 0)
         return CheckHighLow(t)
end

//==================================================
// [翌日指値(寄付)][終値(num%)]
//==================================================
def StopOrderClose(num)
         t = Close * num
         return CheckHighLow(t)
end

//==================================================
// [翌日指値(寄付)][安値(num%)]
//==================================================
def StopOrderLow(num)
         t = Low * num
         return CheckHighLow(t)
end

//==================================================
// [翌日逆指値(終日)][高値(+1Tick)]
// [翌日始値(終日)][翌日始値(+1Tick)]
//==================================================
def StopOrderOpenTick()
         t = {1}Open + Yobine({1}Open, 0)
         return CheckHighLow(t)
end

//==================================================
// 買い（共通条件）
//==================================================
def Buying(i)
         if (0 == PricedataExistCheck({1}Open))
                  BuyingOpen(i,1)
         else
                  if (1 == PricedataExistCheck({2}Open))
                           BuyingClose(i,0)
                  else
                           BuyingOpen(i,2)
                  end
         end
end

//==================================================
// 売り（共通条件）
//==================================================
def Selling(i)
         if (0 == PricedataExistCheck({1}Open))
                  SellingOpen(i,1)
         else
                  if (1 == PricedataExistCheck({2}Open))
                           SellingClose(i,0)
                  else
                           SellingOpen(i,2)
                  end
         end
end

//==================================================
// 終値買い
//==================================================
def BuyingClose(i,d)

         //資金が不足している場合は何もしない
         if ($long == 0)
                  return
         end

         //予算を超えない場合だけ買う
         if ($long * {d}Close  <= $budget)
                  //PrintLog(Year + " " + Month +" " + Day + " i = " + i )
                  if ($Interest == 1 || $Interest == 2)
                           $budget = $budget - $long * {d}Close
                  end
                  $hold[i] = $long
                  $buy[i] = {d}Close
                  if ($shortSelling)
                           {d}Sell(Close, $hold[i])
                  else
                           {d}Buy(Close, $hold[i])
                  end
//                  Fee($hold[i] * Close)
                  Print("B 予算残り = " + $budget)
                  $set[i] = 0
         else
                  PrintLog("予算を超過しています")
         end
end

//==================================================
// 始値買い
//==================================================
def BuyingOpen(i,d)

         //資金が不足している場合は何もしない
         if ($long == 0)
                  return
         end

         //予算を超えない場合だけ買う
         if ($long * {d}Open <= $budget)
                  //PrintLog(Year + " " + Month +" " + Day + " i = " + i )
                  if ($Interest == 1 || $Interest == 2)
                           $budget = $budget - $long * {d}Open
                  end
                  $hold[i] = $long
                  $buy[i] = {d}Open
                  if ($shortSelling)
                           {d}Sell(Open, $hold[i])
                  else
                           {d}Buy(Open, $hold[i])
                  end
//                  Fee($hold[i] * Open)
                  Print("B 予算残り = " + $budget)
                  $set[i] = 0
         else
//                  Print("購入額=" + ($long * {d}Open) + "予算残り =" + $budget)
                  PrintLog("予算を超過しています")
         end
end

//==================================================
// 指値買い
// i:銘柄順序、d:何日後、t:金額
//==================================================
def BuyingLimitedPrice(i, d, t)

         //資金が不足している場合は何もしない
         if ($long == 0)
                  return
         end
         //予算を超えない場合だけ買う
         if ($long * t  <= $budget)
                  if ($Interest == 1 || $Interest == 2)
                           $budget = $budget - $long * t
                  end
                  $hold[i] = $long
                  $buy[i] = t
                  if ($shortSelling)
                           {1}Sell((int)t, $hold[i])
                  else
                           {1}Buy((int)t, $hold[i])
                  end
                  Print("B 予算残り = " + $budget)
                  $set[i] = 0
         else
                  PrintLog("予算を超過しています")
         end
end

//==================================================
// 指値売り
// i:銘柄順序、d:何日後、t:金額
//==================================================
def SellingLimitedPrice(i, d, t)

         if ($shortSelling)
                  {d}Buy(t, $hold[i])
         else
                  {d}Sell(t, $hold[i])
         end
         if ($Interest == 2)
                  $budget = $budget + t * $hold[i]
         elsif ($Interest == 1)
                  $budget = $budget + $buy[i] * $hold[i]
         end
         $hold[i] = 0
         Print("S 予算残り = " + $budget)
end

//==================================================
// 終値売り
//==================================================
def SellingClose(i,d)
         //PrintLog(Year + " " + Month +" " + Day + " i = " + i )
         if ($shortSelling)
                  {d}Buy(Close, $hold[i])
         else
                  {d}Sell(Close, $hold[i])
         end
//         Fee($hold[i] * Close)
         if ($Interest == 2)
                  $budget = $budget + {d}Close * $hold[i]
         elsif ($Interest == 1)
                  $budget = $budget + $buy[i] * $hold[i]
         end
         $hold[i] = 0
         Print("S 予算残り = " + $budget)
end

//==================================================
// 始値売り
//==================================================
def SellingOpen(i,d)
         //PrintLog(Year + " " + Month +" " + Day + " i = " + i )
         if ($shortSelling)
                  {d}Buy(Open, $hold[i])
         else
                  {d}Sell(Open, $hold[i])
         end
//         Fee($hold[i] * Open)
         if ($Interest == 2)
                  $budget = $budget + {d}Open * $hold[i]
         elsif ($Interest == 1)
                  $budget = $budget + $buy[i] * $hold[i]
         end
         $hold[i] = 0
         Print("S 予算残り = " + $budget)
end
